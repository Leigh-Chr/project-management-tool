{
  "info": {
    "name": "PMT Backend API Tests",
    "description": "Collection compl√®te pour tester tous les endpoints du Project Management Tool",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.collectionVariables.set('authToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë• Users & Roles",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Users retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Roles",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/roles",
              "host": ["{{baseUrl}}"],
              "path": ["roles"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Roles retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.equal(3);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Statuses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/statuses",
              "host": ["{{baseUrl}}"],
              "path": ["statuses"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Statuses retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.equal(3);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìã Projects",
      "item": [
        {
          "name": "Get All Projects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Projects retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Project Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/1/details",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "1", "details"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Project details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('projectMembers');",
                  "    pm.expect(jsonData).to.have.property('tasks');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create New Project",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"Project created via Postman test\",\n  \"startDate\": \"2024-09-22\",\n  \"endDate\": \"2024-12-31\",\n  \"statusId\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Project created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.equal('Test Project');",
                  "    pm.collectionVariables.set('newProjectId', jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "‚úÖ Tasks",
      "item": [
        {
          "name": "Get All Tasks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tasks retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Task Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks/1/details",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "1", "details"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task details retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('assignee');",
                  "    pm.expect(jsonData).to.have.property('taskHistory');",
                  "    // V√©rifier que assignee a la structure correcte",
                  "    if (jsonData.assignee) {",
                  "        pm.expect(jsonData.assignee).to.have.property('username');",
                  "        pm.expect(jsonData.assignee).to.have.property('email');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create New Task",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectId\": 1,\n  \"name\": \"Test Task\",\n  \"description\": \"Task created via Postman test\",\n  \"dueDate\": \"2024-10-15\",\n  \"priority\": 2,\n  \"assigneeId\": 2,\n  \"statusId\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.equal('Test Task');",
                  "    pm.expect(jsonData.assignee).to.have.property('username');",
                  "    pm.collectionVariables.set('newTaskId', jsonData.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Task",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Task\",\n  \"description\": \"Task updated via Postman\",\n  \"statusId\": 2,\n  \"assigneeId\": 3\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/{{newTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{newTaskId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.equal('Updated Test Task');",
                  "    pm.expect(jsonData.assignee.username).to.equal('bob');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Tasks by Project",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks/project/1",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "project", "1"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Tasks by project retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üë• Project Members",
      "item": [
        {
          "name": "Get Project Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/1/members",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "1", "members"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Project members retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Project Member",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"projectId\": 1,\n  \"userId\": 5,\n  \"roleId\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects/1/members",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "1", "members"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Member added successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîß Test Relations TaskEntity.assigneeId",
      "item": [
        {
          "name": "Test Task Assignee Relation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks/1",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "1"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Task assignee relation correct', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    ",
                  "    // V√©rifier la structure de l'assignee",
                  "    pm.expect(jsonData).to.have.property('assignee');",
                  "    if (jsonData.assignee) {",
                  "        pm.expect(jsonData.assignee).to.have.property('id');",
                  "        pm.expect(jsonData.assignee).to.have.property('username');",
                  "        pm.expect(jsonData.assignee).to.have.property('email');",
                  "        ",
                  "        // V√©rifier que assignee.id correspond aux donn√©es de test",
                  "        // Task 1 doit √™tre assign√©e √† Alice (user.id = 2)",
                  "        pm.expect(jsonData.assignee.id).to.equal(2);",
                  "        pm.expect(jsonData.assignee.username).to.equal('alice');",
                  "        pm.expect(jsonData.assignee.email).to.equal('alice@example.com');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Multiple Task Assignees",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tasks/project/1",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "project", "1"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Multiple task assignees correct', function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    ",
                  "    // V√©rifier les assignations selon data-model.md",
                  "    jsonData.forEach(function(task) {",
                  "        if (task.assignee) {",
                  "            pm.expect(task.assignee).to.have.property('username');",
                  "            pm.expect(task.assignee).to.have.property('email');",
                  "            ",
                  "            // V√©rifier que les IDs correspondent aux users",
                  "            var validUserIds = [2, 3, 4]; // alice, bob, charlie",
                  "            pm.expect(validUserIds).to.include(task.assignee.id);",
                  "        }",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
